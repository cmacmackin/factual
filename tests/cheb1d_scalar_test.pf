!
!  chebyshev_test.f90
!  This file is part of FIAT.
!
!  Copyright 2016 Christopher MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published
!  by the Free Software Foundation; either version 3 of the License,
!  or (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  License along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module cheb1d_scalar_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use chebyshev_mod
  use cheb1d_fields_mod
  implicit none
  
  integer, parameter :: length = 20
  
@TestCase
  type, extends(testcase) :: test_field
    type(cheb1d_scalar_field) :: field1, field2
    integer :: nodes = length
    real(r8) :: lower1 = -1.0_r8, upper1 = 1.0_r8
    real(r8) :: lower2 = -1.0_r8, upper2 = 1.0_r8
  contains
    procedure :: setup
  end type test_field

contains

  subroutine setup(this)
    class(test_field), intent(inout) :: this
    this%field1 = cheb1d_scalar_field(this%nodes,f1)
    this%field2 = cheb1d_scalar_field(this%nodes,f2,this%lower2,this%upper2)
  end subroutine setup

  pure real(r8) function f1(x)
    real(r8), intent(in) :: x
    f1 = sin(x)
  end function f1
  
  pure real(r8) function df1(x)
    real(r8), intent(in) :: x
    df1 = cos(x)
  end function df1
  
  pure real(r8) function d2f1(x)
    real(r8), intent(in) :: x
    d2f1 = -sin(x)
  end function d2f1
  
  pure real(r8) function f2(x)
    real(r8), intent(in) :: x
    f2 = 1.0_r8 + x*exp(x)
  end function f2
  
  pure real(r8) function df2(x)
    real(r8), intent(in) :: x
    df2 = exp(x) + x*exp(x)
  end function df2

  pure real(r8) function d2f2(x)
    real(r8), intent(in) :: x
    d2f2 = 2._r8*exp(x) + x*exp(x)
  end function d2f2
  
@Test
  subroutine test_domain(this)
    class(test_field), intent(inout) :: this
    real(r8), dimension(2) :: dom
    dom = pack(this%field1%domain(),.true.)
    @assertEqual([this%lower1,this%upper1],dom,message='Incorrect domain returned.')
    dom = pack(this%field2%domain(),.true.)
    @assertEqual([this%lower2,this%upper2],dom,message='Incorrect domain returned.')
    this%field1 = cheb1d_scalar_field(this%nodes,f1,-20._r8,1.5_r8)
    dom = pack(this%field1%domain(),.true.)
    @assertEqual([-20._r8,1.5_r8],dom,message='Incorrect domain returned.')
  end subroutine test_domain
  
@Test
  subroutine test_dimensions(this)
    class(test_field), intent(inout) :: this
    integer, dimension(1) :: dims
    dims = this%field1%dimensions()
    @assertEqual(1,dims(1),message='Incorrect number of dimensions returned.')
    dims = this%field2%dimensions()
    @assertEqual(1,dims(1),message='Incorrect number of dimensions returned.')
  end subroutine test_dimensions

@Test
  subroutine test_raw_size(this)
    class(test_field), intent(inout) :: this
    @assertEqual(this%nodes+1,this%field1%raw_size(),message='Wrong raw size returned.')
    @assertEqual(this%nodes,this%field1%raw_size([.true.],[.false.]),message='Wrong raw size returned.')
    @assertEqual(this%nodes,this%field1%raw_size([.false.],[.true.]),message='Wrong raw size returned.')
    @assertEqual(this%nodes-1,this%field1%raw_size([.false.],[.false.]),message='Wrong raw size returned.')
  end subroutine test_raw_size

@Test
  subroutine test_raw(this)
    class(test_field), intent(inout) :: this
    real(r8), allocatable, dimension(:) :: raw, expected
    integer :: i
    raw = this%field1%raw()
    expected = collocation_points(this%nodes,this%lower1,this%upper1)
    forall (i = 1:this%nodes+1) expected(i) = f1(expected(i))
    @assertEqual(expected,raw,message='Wrong raw contents returned')
    raw = this%field1%raw([.false.])
    @assertEqual(expected(:this%nodes),raw,message='Wrong raw contents returned')
    raw = this%field1%raw([.true.],[.false.])
    @assertEqual(expected(2:),raw,message='Wrong raw contents returned')
    raw = this%field1%raw([.false.],[.false.])
    @assertEqual(expected(2:this%nodes),raw,message='Wrong raw contents returned')
  end subroutine test_raw

@Test
  subroutine test_assign_raw(this)
    class(test_field), intent(inout) :: this
    real(r8), dimension(this%nodes+1) :: raw, xvals
    integer :: i
    xvals = collocation_points(this%nodes,this%lower1,this%upper1)
    forall (i = 1:this%nodes+1) raw(i) = f2(xvals(i))
    call this%field1%set_from_raw(raw)
    @assertEqual(raw,this%field2%raw(),message='Error setting field from raw.')
    forall (i = 1:this%nodes+1) raw(i) = f1(xvals(i))
    call this%field2%set_from_raw(raw(2:),[.false.],[.true.])
    @assertEqual(raw(2:),this%field2%raw([.false.],[.true.]))
    forall (i = 1:this%nodes+1) raw(i) = f2(xvals(i))
    call this%field2%set_from_raw(raw(:this%nodes),[.true.],[.false.])
    @assertEqual(raw(:this%nodes),this%field2%raw([.true.],[.false.]),message='Error setting field from raw.')
    forall (i = 1:this%nodes+1) raw(i) = f1(xvals(i))
    call this%field2%set_from_raw(raw(2:this%nodes),[.false.],[.false.])
    @assertEqual(raw(2:this%nodes),this%field2%raw([.false.],[.false.]),message='Error setting field from raw.')
    forall (i = 1:this%nodes+1) raw(i) = f1(xvals(i))
    call this%field2%set_from_raw(raw)
    @assertEqual(raw,this%field2%raw(),message='Error setting field from raw')
  end subroutine test_assign_raw

@Test
  subroutine test_resolution(this)
    class(test_field), intent(inout) :: this
    integer, dimension(1) :: res
    res = this%field1%resolution()
    @assertEqual(1,size(res),message='Resolution vector has incorrect size')
    @assertEqual(this%nodes,res(1),message='Incorrect resolution returned')
  end subroutine test_resolution

@Test
  subroutine test_fmf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 * this%field2
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field*field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) * f2(x)
    end function func
  end subroutine test_fmf
  
@Test
  subroutine test_fmvf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_vector_field) :: vfield1, vfield2
    vfield1 = cheb1d_vector_field(this%nodes,func,extra_dims=1)
    vfield2 = cheb1d_vector_field(this%nodes,func2,extra_dims=1)
    vfield1 = this%field1 * vfield1
    @assertTrue(vfield2==vfield1,message='Error calculating field*vector_field')
    @assertEqual(vfield2%resolution(),vfield1%resolution(),message='Result has wrong resolution')
    @assertEqual(vfield2%domain(),vfield1%domain(),message='Result has wrong domain')
    @assertEqual(vfield2%dimensions(),vfield1%dimensions(),message='Result has wrong number of dimensions')
  contains
    pure function func(x)
      real(r8), intent(in) :: x
      real(r8), dimension(:), allocatable :: func
      allocate(func(2))
      func = [f1(x),df2(x)]
    end function func
    pure function func2(x)
      real(r8), intent(in) :: x
      real(r8), dimension(:), allocatable :: func2
      allocate(func2(2))
      func2 = f1(x)*func(x)
    end function func2
  end subroutine test_fmvf
  
@Test
  subroutine test_rmf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = 2.0_r8 * this%field1
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating real*field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) * 2.0_r8
    end function func
  end subroutine test_rmf
  
@Test
  subroutine test_fmr(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 * 2._r8
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field*real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) * 2.0_r8
    end function func
  end subroutine test_fmr
  
@Test
  subroutine test_fdf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 / this%field2
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field/field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) / f2(x)
    end function func
  end subroutine test_fdf
  
@Test
  subroutine test_rdf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = 5.0_r8 / this%field2
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating real/field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = 5.0_r8 / f2(x)
    end function func
  end subroutine test_rdf
  
@Test
  subroutine test_fdr(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 / 5.0_r8
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field/real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x)/5.0_r8
    end function func
  end subroutine test_fdr
  
@Test
  subroutine test_faf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 + this%field2
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field+field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) + f2(x)
    end function func
  end subroutine test_faf
  
@Test
  subroutine test_raf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = 1.0e3_r8 + this%field1
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating real+field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) + 1.0e3_r8
    end function func
  end subroutine test_raf
  
@Test
  subroutine test_far(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 + 1.0e3_r8
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field+real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) + 1.0e3_r8
    end function func
  end subroutine test_far
  
@Test
  subroutine test_fsf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 - this%field2
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field-field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) - f2(x)
    end function func
  end subroutine test_fsf
  
@Test
  subroutine test_fsr(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1 - 4.323_r8
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field-real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) - 4.323_r8
    end function func
  end subroutine test_fsr
  
@Test
  subroutine test_rsf(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = 10.2_r8 - this%field1
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating real-field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = 10.2_r8 - f1(x)
    end function func
  end subroutine test_rsf
  
@Test
  subroutine test_fpr(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1**5.2_r8
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field**real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) ** 5.2_r8
    end function func
  end subroutine test_fpr
  
@Test
  subroutine test_fpr4(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1**3.5
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field**real')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) ** 3.5
    end function func
  end subroutine test_fpr4
  
@Test
  subroutine test_fpi(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = this%field1**3
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating field**int')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = f1(x) ** 3
    end function func
  end subroutine test_fpi
  
@Test
  subroutine test_sin(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = sin(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating sin(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = sin(f1(x))
    end function func
  end subroutine test_sin
  
@Test
  subroutine test_cos(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = cos(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating cos(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = cos(f1(x))
    end function func
  end subroutine test_cos
  
@Test
  subroutine test_tan(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = tan(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating tan(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = tan(f1(x))
    end function func
  end subroutine test_tan
  
@Test
  subroutine test_asin(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = asin(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating asin(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = asin(f1(x))
    end function func
  end subroutine test_asin
  
@Test
  subroutine test_acos(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = acos(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating acos(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = acos(f1(x))
    end function func
  end subroutine test_acos
  
@Test
  subroutine test_atan(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = atan(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating atan(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = atan(f1(x))
    end function func
  end subroutine test_atan
  
@Test
  subroutine test_sinh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = sinh(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating sinh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = sinh(f1(x))
    end function func
  end subroutine test_sinh
  
@Test
  subroutine test_cosh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = cosh(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating cosh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = cosh(f1(x))
    end function func
  end subroutine test_cosh
  
@Test
  subroutine test_tanh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = tanh(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating tanh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = tanh(f1(x))
    end function func
  end subroutine test_tanh
  
@Test
  subroutine test_asinh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = asinh(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating asinh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = asinh(f1(x))
    end function func
  end subroutine test_asinh
  
@Test
  subroutine test_acosh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = acosh(this%field2)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating acosh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = acosh(f2(x))
    end function func
  end subroutine test_acosh
  
@Test
  subroutine test_atanh(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = atanh(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating atanh(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = atanh(f1(x))
    end function func
  end subroutine test_atanh
  
@Test
  subroutine test_log(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = log(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating log(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = log(f1(x))
    end function func
  end subroutine test_log
  
@Test
  subroutine test_log10(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = log10(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating log10(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = log10(f1(x))
    end function func
  end subroutine test_log10
  
@Test
  subroutine test_exp(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = exp(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating exp(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = exp(f1(x))
    end function func
  end subroutine test_exp
  
@Test
  subroutine test_abs(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = abs(this%field1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating abs(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = abs(f1(x))
    end function func
  end subroutine test_abs
  
@Test
  subroutine test_sqrt(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_scalar_field) :: field
    field = sqrt(this%field2)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating sqrt(field)')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = sqrt(f2(x))
    end function func
  end subroutine test_sqrt
  
@Test
  subroutine test_minval(this)
    class(test_field), intent(inout) :: this
    @assertEqual(f1(this%lower1),minval(this%field1),message='Error calculating minval(field)')
    @assertEqual(f2(this%lower2),minval(this%field2),message='Error calculating minval(field)')
  end subroutine test_minval
  
@Test
  subroutine test_maxval(this)
    class(test_field), intent(inout) :: this
    @assertEqual(f1(this%upper1),maxval(this%field1),message='Error calculating maxval(field)')
    @assertEqual(f2(this%upper2),maxval(this%field2),message='Error calculating maxval(field)')
  end subroutine test_maxval
  
@Test
  subroutine test_d_dx(this)
    class(test_field), intent(inout) :: this
    integer :: i
    type(cheb1d_scalar_field) :: field
    this%field1 = this%field2%d_dx(1)
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==this%field1,message='Error calculating d(field)/dx')
    this%field1 = this%field2%d_dx(1,2)
    this%field2 = cheb1d_scalar_field(this%nodes,func2)
    @assertTrue(this%field2==this%field1,message='Error calculating d(field)/dx')
    do i = 2,4
      field = this%field2%d_dx(i)
      this%field2 = cheb1d_scalar_field(this%nodes,zeros)
      @assertTrue(this%field2==field,message='Error calculating d(field)/dx')
    end do
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = df2(x)
    end function func
    real(r8) pure function func2(x)
      real(r8), intent(in) :: x
      func2 = d2f2(x)
    end function func2
    real(r8) pure function zeros(x)
      real(r8), intent(in) :: x
      zeros = 0.0_r8
    end function zeros
  end subroutine test_d_dx
  
@Test
  subroutine test_grad(this)
    class(test_field), intent(inout) :: this
    type(cheb1d_vector_field) :: field1, field2
    field1 = .grad. this%field1
    field2 = cheb1d_vector_field(this%nodes,func)
    @assertTrue(this%field2==this%field1,message='Error calculating gradient of field')
    @assertEqual(field2%resolution(),field1%resolution(),message='Result has wrong resolution')
    @assertEqual(field2%domain(),field1%domain(),message='Result has wrong domain')
    @assertEqual(field2%dimensions(),field1%dimensions(),message='Result has wrong number of dimensions')
  contains
    pure function func(x)
      real(r8), intent(in) :: x
      real(r8), dimension(:), allocatable :: func
      allocate(func(1))
      func = df2(x)
    end function func
  end subroutine test_grad
  
@Test
  subroutine test_lap(this)
    class(test_field), intent(inout) :: this
    integer :: i
    type(cheb1d_scalar_field) :: field
    field = .laplacian. this%field1
    this%field2 = cheb1d_scalar_field(this%nodes,func)
    @assertTrue(this%field2==field,message='Error calculating laplacian of field')
    @assertEqual(this%field2%resolution(),field%resolution(),message='Result has wrong resolution')
    @assertEqual(this%field2%domain(),field%domain(),message='Result has wrong domain')
    @assertEqual(this%field2%dimensions(),field%dimensions(),message='Result has wrong number of dimensions')
  contains
    real(r8) pure function func(x)
      real(r8), intent(in) :: x
      func = d2f1(x)
    end function func
  end subroutine test_lap

end module cheb1d_scalar_test
