!
!  chebyshev_test.f90
!  This file is part of FIAT.
!
!  Copyright 2016 Christopher MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU Lesser General Public License as
!  published by the Free Software Foundation; either version 3 of the 
!  License, or (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU Lesser General Public License for more details.
!  
!  You should have received a copy of the GNU Lesser General Public
!  License along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module chebyshev_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use chebyshev_mod
  implicit none
  
@TestParameter
  type, extends(abstracttestparameter) :: cheb_case
    integer :: nodes
    real(r8) :: lower, upper
    real(r8), dimension(:), allocatable :: expected
  contains
    procedure :: tostring
  end type cheb_case

@TestCase(testParameters={get_params()}, constructor=new_test)
  type, extends(parameterizedtestcase) :: test_cheb
    integer :: nodes
    real(r8) :: lower, upper
    real(r8), dimension(:), allocatable :: expected
  end type test_cheb

contains

  type(cheb_case) function constructor(nodes,lower,upper,expected)
    integer, intent(in) :: nodes
    real(r8), intent(in), optional :: lower, upper
    real(r8), dimension(:), intent(in) :: expected
    constructor%nodes = nodes
    if (present(lower)) then
      constructor%lower = lower
    else
      constructor%lower = -1.0
    end if
    if (present(upper)) then
      constructor%upper = upper
    else
      constructor%upper = -1.0
    end if
    constructor%expected = expected
  end function constructor
  
  type(test_cheb) function new_test(param)
    type(cheb_case), intent(in) :: param
    new_test%nodes = param%nodes
    new_test%lower = param%lower
    new_test%upper = param%upper
    new_test%expected = param%expected
  end function new_test
  
  function get_params() result(params)
    type(cheb_case), allocatable, dimension(:) :: params
    params = [ constructor(3,-1._r8,1._r8,[1._r8,0.5_r8,-0.5_r8,-1._r8]), &
               constructor(3,-1._r8,2._r8,[2._r8,1.25_r8,-0.25_r8,-1._r8]), &
               constructor(3,0._r8,1._r8,[1._r8,0.75_r8,0.25_r8,0._r8]), &
               constructor(3,-2._r8,2._r8,[2._r8,1._r8,-1._r8,-2._r8]) ]
  end function get_params
  
  function tostring(this) result(string)
    class(cheb_case), intent(in) :: this
    character(:), allocatable :: string
    character(len=54), parameter :: format_str = &
        "(g0,' chebyshev collocation nodes from ',g0,' to ',g0)"
    allocate(character(len=120) :: string)
    write(string,format_str) this%nodes, this%lower, this%upper
  end function tostring
  
@Test
  subroutine test_collocation(this)
    class(test_cheb), intent(inout) :: this
    real(r8), dimension(:), pointer :: points
    if (this%lower==-1.0) then
      if (this%upper==1.0) then
        points => collocation_points(this%nodes)
      else
        points => collocation_points(this%nodes,upper_bound=this%upper)
      end if
    else
      if (this%upper==1.0) then
        points => collocation_points(this%nodes,this%lower)
      else
        points => collocation_points(this%nodes,this%lower,this%upper)
      end if
    end if
    @assertEqual(this%nodes+1,size(points),message="Collocation points array wrong length.")
    @assertEqual(this%expected,points,message="Calculated Chebyshev collocation points incorrect.",tolerance=1.e-9_r8)
  end subroutine test_collocation

@Test
  subroutine test_row(this)
    class(test_cheb), intent(inout) :: this
    real(r8), dimension(:), allocatable :: actual, expected
    actual = differentiation_row(3,1)
    expected = [19._r8/6._r8, -4._r8, 4._r8/3._r8, -0.5_r8]
    @assertEqual(expected,actual,tolerance=1.e-10_r8,message='Incorrect 1st row of differentiation matrix returned.')
    actual = differentiation_row(3,2)
    expected = [1._r8, -1._r8/3._r8, -1._r8, 1._r8/3._r8]
    @assertEqual(expected,actual,tolerance=1.e-10_r8,message='Incorrect 2nd row of differentiation matrix returned.')
    actual = differentiation_row(3,3)
    expected = [-1._r8/3._r8, 1._r8, 1._r8/3._r8, -1._r8]
    @assertEqual(expected,actual,tolerance=1.e-10_r8,message='Incorrect 3rd row of differentiation matrix returned.')
    actual = differentiation_row(3,4)
    expected = [0.5_r8, -4._r8/3._r8, 4._r8, -19._r8/6._r8]
    @assertEqual(expected,actual,tolerance=1.e-10_r8,message='Incorrect 4th row of differentiation matrix returned.')
  end subroutine test_row

@Test
  subroutine test_differntiate_1d(this)
    class(test_cheb), intent(inout) :: this
    integer, parameter :: nodes = 24
    real(r8), dimension(:), pointer :: xvals
    real(r8), dimension(nodes+1) :: func
    xvals => collocation_points(nodes,this%lower,this%upper)
    func = f1(xvals)
    call differentiate_1d(func,xvals)
    @assertEqual(df1(xvals(2:nodes)),func(2:nodes),message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
    func = f1(xvals)
    call differentiate_1d(func,xvals,2)
    @assertEqual(d2f1(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
    func = f1(xvals)
    call differentiate_1d(func,xvals,3)
    @assertEqual(d3f1(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-7_r8)
    func = f1(xvals)
    call differentiate_1d(func,xvals,0)
    @assertEqual(f1(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
    func = f1(xvals)
    call differentiate_1d(func,xvals,-1)
    @assertEqual(f1(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
    func = f2(xvals)
    call differentiate_1d(func,xvals,1)
    @assertEqual(df2(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
    func = f2(xvals)
    call differentiate_1d(func,xvals,2)
    @assertEqual(-f2(xvals),func,message="Derivative calculation incorrect.", tolerance=1.e-9_r8)
  contains
    elemental real(r8) function f1(x)
      real(r8), intent(in) :: x
      f1 = x**3 - 2.0_r8*x**2 + 8.0_r8*x -12._r8
    end function f1
    elemental real(r8) function df1(x)
      real(r8), intent(in) :: x
      df1 = 3.0_r8*x**2 - 4.0_r8*x + 8.0_r8
    end function df1
    elemental real(r8) function d2f1(x)
      real(r8), intent(in) :: x
      d2f1 = 6.0_r8*x - 4.0_r8
    end function d2f1
    elemental real(r8) function d3f1(x)
      real(r8), intent(in) :: x
      d3f1 = 6.0_r8
    end function d3f1
    elemental real(r8) function f2(x)
      real(r8), intent(in) :: x
      f2 = sin(x)
!~       f2 = exp(x)*sin(5.0_r8*x)
    end function f2
    elemental real(r8) function df2(x)
      real(r8), intent(in) :: x
      df2 = cos(x)
!~       df2 = exp(x)*(sin(5.0_r8*x) + 5.0_r8*cos(5.0_r8*x))
    end function df2
  end subroutine test_differntiate_1d
  
end module chebyshev_test
